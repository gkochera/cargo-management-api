/**
 * Author: George Kochera
 * Date: 5/10/2021
 * File: boat_class.js
 * Description: Contains all the functions for manipulating, storing and handling Boats
 */

// Boat Object Definition
/*
    { 
      "id": "abc123",                           # Automatically generated by Datastore
      "name": "Sea Witch",                      # The name of the boat, a string
      "type": "Catamaran",                      # The type of the boat, power boat, sailboat, catamaran etc. a string
      "length": 28,                             # The length of the boat
      "public": true,                           # Boolean. true means the boat is public, false means it's private.
      "owner": "auth0|5eb70257",                # The owner of the boat, value of sub property in the JWT
      "self":"https://appspot.com/boats/abc123" # Optional
    }
*/

var http = require('http')
var datastore = require('./database');
var h = require('./helper');

module.exports = class Load
{
    constructor(data, request=null)
    {

        this.requiredAttributes = ['volume', 'content', 'creation_date']

        if (data instanceof http.IncomingMessage)
        {
            this.id = null;
            this.carrier = null;
            this.volume = data.body.volume;
            this.content = data.body.content;
            this.creation_date = data.body.creation_date;
            this.key = datastore.key('Load');
            this.self = null;
            this.hasAllFields = this._hasAllFields(data);
        }
        else
        {

            this.id = data[datastore.KEY].id.toString()
            this.carrier = data.carrier;
            this.volume = data.volume;
            this.content = data.content;
            this.creation_date = data.creation_date;
            this.key =  data[datastore.KEY];
            this.self = request.protocol + "://" + request.get("host") + "/loads/" + data[datastore.KEY].id;
            this.hasAllFields = true;
        }
    }


    /**
     * Returns a load object without metadata
     */
    getLoad() {
        return {
            id: this.id,
            volume: this.volume,
            carrier: this.carrier,
            content: this.content,
            creation_date: this.creation_date,
            self: this.self
        }
    }

    /**
     * Returns a load object without metadata or carrier
     */
    getLoadWithoutCarrier() {
        return {
            id: this.id,
            volume: this.volume,
            content: this.content,
            creation_date: this.creation_date,
            self: this.self
        }
    }

    async insert()
    {
        // Construct the key and data for the datastore query
        var entity = {
            key: this.key,
            data: {
                volume: this.volume,
                carrier: this.carrier,
                content: this.content,
                creation_date: this.creation_date,
            }
        }

        // Insert the new boat
        await datastore.insert(entity);
    }

    async update()
    {
        var entity = {
            key: this.key,
            data: {
                volume: this.volume,
                carrier: this.carrier,
                content: this.content,
                creation_date: this.creation_date,
            }
        }

        await datastore.update(entity)
    }

    async get(nodeRequest)
    {
        // Now get the boat back so we can display it
        let [loadResult] = await datastore.get(this.key);
        this.id = loadResult[datastore.KEY].id.toString();
        this.volume = loadResult.volume;
        this.carrier = loadResult.carrier;
        this.content = loadResult.content;
        this.creation_date = loadResult.creation_date;
        this.key = loadResult[datastore.KEY];
        this.self = nodeRequest.protocol + "://" + nodeRequest.get("host") + "/loads/" + loadResult[datastore.KEY].id
    }

    /**
     * Determines if the Boat has all fields filled out.
     * 
     * @returns true if all fields are present.
     */
    _hasAllFields(nodeRequest)
    {
        let nodeRequestBodyKeys = Object.keys(nodeRequest.body);
        return this.requiredAttributes.every(key => nodeRequestBodyKeys.includes(key))
    }

        /**
     * Updates the fields in a Boat object.
     * @param {req.body} requestBody An express req.body object.
     * @returns true if at least one field is present.
     */
    updateFields(request)
    {
        let keys = Object.keys(request.body);

        if (keys.length < 1)
        {
            return false;
        }

        keys.map(key => {
            if (this.hasOwnProperty(key))
            {
                this[key] = request.body[key];
            }
        })

        // Ensure users can't try to circumvent integer constraint
        this["length"] = parseInt(this["length"], 10);
        
        return true;
    }
    
    /**
     * Updates all fields in a boat object. If all fields are not included in the request body this function will fail.
     * @param {req.body} requestBody 
     * @returns true iff all fields are inlcuded in the request body.
     */
    updateAllFields(request)
    {
        if (!this._hasAllFields(request))
        {
            return false;
        }
        else
        {
            return this.updateFields(request);
        }
    }
}